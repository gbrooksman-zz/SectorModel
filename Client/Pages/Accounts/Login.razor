@page "/Accounts/Login"

@inject AppSettings appSettings
@inject AppState appState
@inject NavigationManager nav
@inject HttpClient httpClient

@using SectorModel.Shared.Entities;
@using System.Net.Http.Json;

<EditForm EditContext="editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />    

    <div class="container text-center">
        <div class="row text-center d-flex justify-content-center">
            <div class="col-lg-12">
                <p>Welcome to Sector Modelling!</p>
                <p>This application is designed to be a simple way to create portfolio models based on Sector ETFs</p>
            </div>
        </div>
        <div class="row  justify-content-center">
            <div class="col-sm-4">
                <p>Login to an existing account</p>
            </div>
        </div>

        @BadLoginDisplay

        <div class="row form-group justify-content-center">
            <div class="col-sm-4">
                <InputText class="form-control" type="text" id="txtEmail" size="25" 
                           placeholder="email" @bind-Value="formUser.Email"></InputText>
            </div>
        </div>
        <div class="row form-group justify-content-center">
            <div class="col-sm-4">
                <InputText class="form-control" type="password" id="txtPassword" size="25"
                           placeholder="password" @bind-Value="formUser.Password"></InputText>
            </div>
        </div>
        <div class="row form-group justify-content-center">
            <div class="col-sm-4">
                <button class="btn btn-primary" @onclick="LoginUser">Login</button>
            </div>
        </div>
        <div class="row form-group justify-content-center">
            <div class="col-sm-4">
                <a class="btn btn-link" href="/Accounts/Signup"> Create an account </a>
            </div>
        </div>
    </div>
</EditForm>

@code
{
    private EditContext editContext;
    private User formUser = new User();

    private RenderFragment BadLoginDisplay { get; set; }

    protected override void OnInitialized()
    {
        editContext = new EditContext(formUser);

		formUser.Email = "geoffbrooks1@hotmail.com";
		formUser.Password = "test";
    }

    private async Task LoginUser()
    {
        if (!string.IsNullOrEmpty(formUser.Email) && !string.IsNullOrEmpty(formUser.Password))
        {
            HttpResponseMessage response = await httpClient.PostAsJsonAsync("user/validate", formUser);
            bool isOK = await response.Content.ReadFromJsonAsync<bool>();

            if (isOK)
            {
				await InitState();

				nav.NavigateTo("/User/StartPage");
			}
			else
			{
				BadLoginDisplay = LoginError();
			}
              
        }
    }

    RenderFragment LoginError() => builder =>
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "row");
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "class", "col-12 h5");
        builder.AddAttribute(4, "style", "color: Red;");
        builder.AddContent(5, $"User name or password is incorrect");
        builder.CloseElement();
        builder.CloseElement();
    };

	private async Task InitState()
	{
		//=============================================================================================
		//initialize settings

        appSettings.LastQuoteDate = await httpClient.GetFromJsonAsync<DateTime>("quote/getlastquotedate");

        appSettings.CoreModel =  await httpClient.GetFromJsonAsync<Model>("model/getcoremodel");

		appSettings.SPDRModel =  await httpClient.GetFromJsonAsync<Model>("model/getspdrmodel");

		//=============================================================================================
		//initialize state

		if (appState.AllEquities == null)
        {
            appState.AllEquities = await httpClient.GetFromJsonAsync<List<Equity>>("equity/getall");
        }

		if (appState.CurrentUser == null)
		{
			appState.CurrentUser = await httpClient.GetFromJsonAsync<User>($"user/get?email={formUser.Email}");
		}		

		if (appState.AllUserModels == null)
		{
			appState.AllUserModels = await httpClient.GetFromJsonAsync<List<Model>>($"model/getmodellist?userId={appState.CurrentUser.Id}");
		}

		//=============================================================================================

	}
}