@page "/ModelEdit/{IsEdit:bool}"

@inject AppSettings appSettings
@inject AppState appState
@inject NavigationManager nav
@inject HttpClient httpClient

@using SectorModel.Shared.Entities

<AppHeader />

@if (IsEdit)
{
    <h4>@model.Name details</h4>
}
else
{
    <h4>Add a new model</h4>
}

<EditForm Model="model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-row">
		<div class="col-6">
    	    <label for="txtName">Model Name</label>
        	<InputText class="form-control" id="txtName" size="50" placeholder="model name" @bind-Value="model.Name"/>
		</div>
    </div>
	<div class="form-row">
		<div class="col-6">
			<label for="dtStartDate">Starting Date</label>
			<InputDate class="form-control" id="dtStartDate" @bind-Value="model.StartDate"/>
		</div>
	</div>
	<div class="form-row">
		<div class="col-6">
			<label for="txtStartingValue">Starting Value</label>
			<InputNumber class="form-control" id="txtStartingValue" size="50" placeholder="starting value" @bind-Value="model.StartValue"/>
		</div>
	</div>

	@if (IsEdit)
	{
		<br/>
		<br/>
	
		<div class="row">
			<div class="col-lg">
				<div class="card">
					<div class="card-body">
						<label>Created: @model.CreatedAt</label>
						<label>Updated: @model.UpdatedAt</label>
					</div>
				</div>
			</div>
		</div>
	}

	<br/>
	<br/>

    <div class="row">
        <div class="col-4">
            <button class="btn btn-primary" type="submit">Save</button>
        </div>
        @if (model.IsActive)
        {
            <div class="col-4">
                <button class="btn btn-secondary" type="button" @onclick="Archive">Deactivate</button>
            </div>
        }
        else
        {
            <div class="col-4">
                <button class="btn btn-secondary" type="button" @onclick="UnArchive">Activate</button>
            </div>
        }
        <div class="col-4">
            <button class="btn btn-secondary" type="button" @onclick="Close">Cancel</button>
        </div>
    </div>


</EditForm>

@code
{
    private Model model = new Model();

    [Parameter]
    public bool IsEdit { get; set; }

    protected override void OnInitialized()
    {
        model = appState.Model;

        if (IsEdit)
        {
            model = appState.ModelList.Where(m => m.Id == model.Id).FirstOrDefault();
            model.StopValue = model.ItemList.Sum(i => i.CurrentValue);
        }
        else
        {
            model.UserId = appState.CurrentUser.Id;
            model.StartDate = DateTime.Now;
            model.IsActive = true;
            model.StopDate = DateTime.Now.AddYears(3);
            model.ItemList = new List<ModelItem>();
        }
    }


    private async Task HandleValidSubmit()
    {
        RemoveFromState(model);

        HttpResponseMessage response = await httpClient.PostAsJsonAsync("model/save", model);
        model = await response.Content.ReadFromJsonAsync<Model>();

        AddToState(model);

        Close();
    }

    private async Task Archive()
    {
        model.IsActive = false;
        model.StopDate = DateTime.Now;
        await HandleValidSubmit();
    }

    private async Task UnArchive()
    {
        model.IsActive = true;
        model.StartDate = DateTime.Now;
        await HandleValidSubmit();
    }

    private void Close()
    {
        nav.NavigateTo("/User/StartPage");
    }

    private void RemoveFromState(Model item)
    {
        appState.ModelList.Remove(item);
    }

    private void AddToState(Model item)
    {
        appState.Model = item;
        appState.ModelList.Add(item);
    }
}
