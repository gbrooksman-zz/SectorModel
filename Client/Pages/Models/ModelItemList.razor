@page "/ModelItemList/{CanAdd:bool}/{CanEdit:bool}"

@inject AppSettings appSettings
@inject HttpClient httpClient
@inject NavigationManager nav
@inject AppState appState;

@using SectorModel.Client.Pages.Components
@using SectorModel.Shared.Entities
@using SectorModel.Client.Common


<AppHeader/>

@if (ShowDialog)
{
	<div class="modal border border-dark" tabindex="-1" style="display:block;height:700px;" role="dialog">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header text-white bg-info">
					<p class="modal-title">Add an Item to the Model</p>
					<button type="button" class="close" @onclick="HideDialog">
						<span class="text-white" aria-hidden="true">X</span>
					</button>
				</div>
				<div class="modal-body">
					<ModelItemEdit EditModelItem="@modelItem" Model="@model"/> 
				</div>
			</div>
		</div>
	</div>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-6">
            <h4>@model.Name</h4>
        </div>
        <div class="col-6" style="text-align:right;">
            <span>Starting Date:@Utils.FormatDate(model.StartDate)</span>
        </div>
    </div>	
    <div class="row">

		
        <div class="col-12">
				@if (CanAdd)
				{
					<input type="button" id="btnAdd" class="btn btn-primary" @onclick="ShowAddItem" value="Add" />
				}
			<DataGrid Items="@modelEquityList" TItem="ModelItem" Context="m">
				<HeaderTemplate>
					<th>Symbol</th>
					<th>Name</th>
					<th>Percent in Model</th>
					<th>Last Price</th>
					<th>Cost</th>
					<th>Current Value</th>					
					<th>Gain/Loss</th>
					@if(CanEdit)
					{
						<th>Actions</th>
					}
				</HeaderTemplate>
				<RowTemplate>
					<td> @m.Equity.Symbol</td>
					<td> @m.Equity.SymbolName</td>
					<td> @m.Percentage</td>
					<td> @m.LastPrice</td>
					<td> @GetCost(m.Cost)</td>
					<td> @GetValue(m.CurrentValue)</td>					
					<td> @Utils.CalcGainLoss(m.CurrentValue, m.Cost) </td>

					@if(CanEdit)
					{
						<td>
							<input type="button" class="btn btn-secondary" value="Edit" @onclick="( () => {EditItem(m);})"/>
						</td>
					}
				</RowTemplate>
				<FooterTemplate>
					<td colspan="3">
						Equities in Model: @m.Count
					</td>
					<td>
						Totals: 
					</td>
					<td>
						@Utils.FormatNumber(totalCost)
					</td>
					<td>
						@Utils.FormatNumber(totalValue)
					</td>
					<td>
						@Utils.CalcGainLoss(totalValue, totalCost)
					</td>
				</FooterTemplate>
			</DataGrid>
        </div>
    </div>
</div>

@code
{
	
	

	[Parameter]
	public bool CanAdd { get; set; } = false;

	[Parameter]
    public bool CanEdit { get; set; } = false;

	bool ShowDialog = false;

	decimal totalValue = 0;
    decimal totalCost = 0;

	Guid modelId {get; set;}

	Model model = new Model();

	ModelItem modelItem = new ModelItem();

	List<ModelItem> modelEquityList = new List<ModelItem>();

    protected override void OnInitialized()
    {
		model = appState.Model;  //await httpClient.GetFromJsonAsync<Model>($"model/Get?modelId={modelId}&quoteDate={DateTime.Now}");
		modelEquityList = model.ItemList;
	}

	private MarkupString GetValue(decimal inValue)
    {
        totalValue += inValue;
        return Utils.FormatNumber(inValue);
    }

    private MarkupString GetCost(decimal inValue)
    {
        totalCost += inValue;
        return Utils.FormatNumber(inValue);
    }

	private void ShowAddItem()
	{
		ShowDialog = true;
	}

	private void EditItem(ModelItem item)
	{
		modelItem = item;
		modelItem.ModelId = modelId;
		ShowDialog = true;
	}

	private void HideDialog()
	{
		ShowDialog = false;
	}


}

