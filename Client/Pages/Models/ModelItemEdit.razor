@inject AppSettings appSettings
@inject AppState appState
@inject HttpClient httpClient
@inject NavigationManager nav

@using SectorModel.Shared.Entities


<EditForm Model="EditModelItem" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
    <ValidationSummary />

<select id="equityDDL" @bind="selectedSymbol">
	<option></option>
	@foreach (var equity in appSettings.AllEquities)
	{
		<option value="@equity.Symbol">@equity.SymbolName</option>
	}
</select>

	<div class="form-control">
			<label>Percent of Overall Model:</label>
            <InputNumber id="txtValue" size="5" placeholder="Percent of total model" @bind-Value="EditModelItem.Percentage"></InputNumber>
    </div>

		<div class="row form-group">
		<div class="col-sm-4">
 			<button class="btn btn-primary" type="submit">Save</button>
		</div>
		<div class="col-sm-8">
 			<button class="btn btn-secondary" type="button" @onclick="Close">Cancel</button>
		</div>
    </div>
	
</EditForm>

@code
{
	

	[Parameter]
    public ModelItem EditModelItem { get; set; }

	public string selectedSymbol;
	void HandleSelection(ChangeEventArgs e)
    {
        selectedSymbol = e.Value.ToString();

    }

	private async Task HandleValidSubmit()
    { 
		Equity eq = appSettings.AllEquities.Where( e => e.Symbol == selectedSymbol).FirstOrDefault();
		EditModelItem.EquityId = eq.Id;
		EditModelItem.Equity = eq;

		HttpResponseMessage response = await httpClient.PostAsJsonAsync("model/saveitem", EditModelItem);
		
		appState.AllUserModels = await httpClient.GetFromJsonAsync<List<Model>>($"model/getmodellist?userId={appState.CurrentUser.Id}");

    }

	private void Close()
	{
		nav.NavigateTo($"/ModelItemList/{EditModelItem.ModelId}");
	}

}