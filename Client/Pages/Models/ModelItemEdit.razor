@inject AppSettings appSettings
@inject AppState appState
@inject HttpClient httpClient
@inject NavigationManager nav

@using SectorModel.Shared.Entities


<EditForm Model="EditModelItem" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
    <ValidationSummary />

	<select id="equityDDL" @bind="selectedSymbol">
		<option></option>
		@foreach (var equity in appSettings.AllEquities)
		{
			<option value="@equity.Symbol">@equity.SymbolName</option>
		}
	</select>

	<div class="form-control">
			<label>Percent of Overall Model:</label>
            <InputNumber id="txtValue" size="5" placeholder="Percent of total model" @bind-Value="EditModelItem.Percentage"></InputNumber>
    </div>

		<div class="row form-group">
		<div class="col-sm-4">
 			<button class="btn btn-primary" type="submit">Save</button>
		</div>
		<div class="col-sm-8">
 			<button class="btn btn-secondary" type="button" @onclick="Close">Cancel</button>
		</div>
    </div>
	
</EditForm>

@code
{	

    [Parameter]
    public ModelItem EditModelItem { get; set; }

    [Parameter]
    public Model Model { get; set; }

    public string selectedSymbol;


    void HandleSelection(ChangeEventArgs e)
    {
        selectedSymbol = e.Value.ToString();

    }

    protected override void OnInitialized()
    {
        EditModelItem.ModelId = Model.Id;
    }

    private async Task HandleValidSubmit()
    {
        Equity eq = appSettings.AllEquities.Where( e => e.Symbol == selectedSymbol).FirstOrDefault();

        Quote lastQuote = appSettings.LatestQuotes.Where(q => q.EquityId == eq.Id).FirstOrDefault();

        EditModelItem.EquityId = eq.Id;
        EditModelItem.Equity = eq;
        EditModelItem.Cost = (Model.StartValue * (EditModelItem.Percentage / 100));
        EditModelItem.Shares = Math.Round((EditModelItem.Cost / lastQuote.Price),0);

        HttpResponseMessage response = await httpClient.PostAsJsonAsync<ModelItem>("model/saveitem", EditModelItem);

        appState.AllUserModels = await httpClient.GetFromJsonAsync<List<Model>>($"model/getmodellist?userId={appState.CurrentUser.Id}");

        Close();
    }

    private void Close()
    {
       // string routeString = $"/Models/ModelItemList/{EditModelItem.ModelId}/true/true";

        nav.NavigateTo($"/Redirect/{EditModelItem.ModelId}");
    }

}