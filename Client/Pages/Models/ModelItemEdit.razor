@inject AppSettings appSettings
@inject AppState appState
@inject HttpClient httpClient
@inject NavigationManager nav

@using SectorModel.Shared.Entities

<EditForm Model="EditModelItem" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container-fluid"> 
		<div class="row">
			<div class="col">
				<label>1. Select a Sector Fund:</label>  
			</div>
		</div>    
		<div class="row">
			<div class="col">				  
				<select id="equityDDL" @bind="selectedSymbol">
					<option></option>
					@foreach (var equity in appSettings.AllEquities)
					{
						<option value="@equity.Symbol">@equity.SymbolName (@equity.Symbol)</option>
					}
				</select>
			</div>	
		</div>

		<br/>
		<hr/>
		
		<div class="row">
			<div class="col">
				<label>2. Choose a percent to allocate:</label>  
			</div>
		</div>
		<div class="row">
			<div class="col-sm-4">
				<label>Percent:</label>
			</div>
			<div class="col-sm-4">
				<InputNumber id="txtPercent" size="5" placeholder="Percent" @bind-Value="EditModelItem.Percentage"></InputNumber>
			</div>						
			<div class="col-sm-4">
				<label>Model percent remaining: @remainingPercent:</label>                
			</div>
		</div>

		<br/>
		<hr/>

		<div class="row">
			<div class="col">
				<label>3. Review and Submit</label>  
			</div>		
		</div>	
		<div class="row">
			<div class="col">
				<button class="btn btn-success" type="submit">Save</button> 
			</div>
			<div class="col">
				<button class="btn btn-secondary" @onclick="Close">Close</button>
			</div>
			<div class="col">
				<button class="btn btn-danger btn-block" @onclick="DeleteItem">Delete this item</button>
			</div>				
		</div>

	</div>

</EditForm>

@code
{	
    [Parameter]
    public ModelItem EditModelItem { get; set; }

    [Parameter]
    public Model Model { get; set; }

	private string _selectedSymbol;
	public string selectedSymbol
	{
		get => _selectedSymbol;
		set
		{
			_selectedSymbol = value;
			HandleSelection(_selectedSymbol);
		}
	}
   
	private decimal lastPrice = 0;

	private decimal remainingPercent = 0;

    protected void HandleSelection(string selSymbol)
    {
		Equity eq = appSettings.AllEquities.Where(e => e.Symbol == selSymbol).FirstOrDefault();		
		Quote quote = appSettings.LatestQuotes.Where( q => q.EquityId == eq.Id).FirstOrDefault();
		if (quote != null)
		{
			lastPrice = quote.Price;
		}
    } 

    protected override void OnInitialized()
    {
        EditModelItem.ModelId = Model.Id;

		if (EditModelItem.Equity != null)
		{
        	selectedSymbol = EditModelItem.Equity.Symbol;
		}

		remainingPercent = (100 - Model.ItemList.Sum( p => p.Percentage));
    }

    private async Task HandleValidSubmit()
    {
        Equity eq = appSettings.AllEquities.Where( e => e.Symbol == selectedSymbol).FirstOrDefault();

        Quote lastQuote = appSettings.LatestQuotes.Where(q => q.EquityId == eq.Id).FirstOrDefault();

        EditModelItem.EquityId = eq.Id;
        EditModelItem.Equity = eq;
        EditModelItem.Cost = (Model.StartValue * (EditModelItem.Percentage / 100));
        EditModelItem.Shares = Math.Round((EditModelItem.Cost / lastQuote.Price),3);

		RemoveFromState(EditModelItem);
		
        HttpResponseMessage response = await httpClient.PostAsJsonAsync<ModelItem>("model/saveitem", EditModelItem);
		ModelItem item = await response.Content.ReadFromJsonAsync<ModelItem>();
		
		AddToState(item);
  
        Close();
    }

    private void Close()
    {	
        nav.NavigateTo($"/Redirect");
    }

    private async Task DeleteItem()
    {
		RemoveFromState(EditModelItem);

		HttpResponseMessage response = await httpClient.DeleteAsync ($"model/RemoveModelItem?modelItemId={EditModelItem.Id}");
		ModelItem item = await response.Content.ReadFromJsonAsync<ModelItem>();
		
		AddToState(item);

		Close();
    }

	private void RemoveFromState(ModelItem item)
	{
		appState.ModelList.Remove(Model);
		Model.ItemList.Remove(item);
	}

	private void AddToState(ModelItem item)
	{
		Model.ItemList.Add(item);
		appState.Model = Model;
		appState.ModelList.Add(Model);
	}
}