@inject AppSettings appSettings
@inject AppState appState
@inject HttpClient httpClient
@inject NavigationManager nav

@*@using SectorModel.Client.Common*@
@using SectorModel.Shared.Entities
@using System.Linq

@if (!IsCore)
{
    <input type="button" id="btnAdd" class="btn btn-primary" @onclick="AddModel" value="Add" />
    <input type="button" id="btnCopyCore" class="btn btn-secondary" @onclick="CopyCore" value="Clone Core as New" />
}

<DataGrid Items="@Models" TItem="Model" Context="m">
    <HeaderTemplate>
        <th>Name</th>
        <th>Start Date</th>
        <th>Stop Date</th>
        <th>Start Value</th>
        <th>Latest Value</th>
        <th>Gain/Loss</th>
        <th>Actions</th>
    </HeaderTemplate>
    <RowTemplate>
        <td>@m.Name</td>
        <td>@Utils.FormatDate(m.StartDate)</td>
        <td>@Utils.FormatDate(m.StopDate)</td>
        <td>@Utils.FormatNumber(m.StartValue)</td>
        <td>@Utils.FormatNumber(m.StopValue)</td>
        <td>@Utils.CalcGainLoss(m.StopValue, m.StartValue) </td>
        <td>
            <input type="button" id="btnLineChart" class="btn btn-info" @onclick="@( () => { ShowLineChart(@m.Id); } )" value="History" />
            <input type="button" id="btnPieChart" class="btn btn-info" @onclick="@( () => { ShowPieChart(@m.Id); } )" value="Pie" />

            @if (!IsCore)
            {
                <input type="button" id="btnDetails" class="btn btn-info" @onclick="@( () => { EditModel(@m.Id); } )" value="Details" />
                <input type="button" id="btnConfigure" class="btn btn-info" @onclick="@( () => { Configure(@m.Id); } )" value="Composition" />
            }
            else
            {
                <input type="button" id="btnCoreComp" class="btn btn-info" @onclick="@( () => { ShowCore(@m.Id); } )" value="Composition" />
            }
        </td>
    </RowTemplate>
    <FooterTemplate>
        <td colspan="4">
            Models: @m.Count
        </td>
    </FooterTemplate>
</DataGrid>

@code
{
    [Parameter] public List<Model> Models { get; set; }

    [Parameter] public bool IsCore { get; set; }

    private void EditModel(Guid modelId)
    {
        SetModel(modelId);
        nav.NavigateTo($"/ModelEdit/true");
    }

    private void Configure(Guid modelId)
    {
        SetModel(modelId);
        nav.NavigateTo($"/ModelItemList/true/true");
    }

    private void ShowCore(Guid modelId)
    {
        SetModel(modelId);
        nav.NavigateTo($"/ModelItemList/false/false");
    }

    private void ShowPieChart(Guid modelId)
    {
        SetModel(modelId);
        nav.NavigateTo("/ModelPieChart");
    }

    private void ShowLineChart(Guid modelId)
    {
        SetModel(modelId);
        nav.NavigateTo("/ModelLineChart");
    }

    private void AddModel()
    {
        appState.Model = new Model();
        nav.NavigateTo($"/ModelEdit/false");
    }

    private async Task CopyCore()
    {
        Model model = appSettings.CoreModel;
        model.Name = $"Copy of {model.Name}";
        model.UserId = appState.CurrentUser.Id;
        model.StartDate = DateTime.Now;
        model.Id = Guid.Empty;

        HttpResponseMessage response = await httpClient.PostAsJsonAsync("model/save", model);
        Model coreCopy = await response.Content.ReadFromJsonAsync<Model>();
        appState.Model = model;
        appState.ModelList.Add(model);
    }

    private void SetModel(Guid modelId)
    {
        appState.Model = appState.ModelList.Where(m => m.Id == modelId).FirstOrDefault();
    }
}
