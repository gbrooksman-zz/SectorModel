@inject AppSettings appSettings
@inject UserState userState
@inject HttpClient httpClient
@inject NavigationManager nav

@using SectorModel.Shared.Entities
@using System.Linq

@if (!IsCore)
{
    <input type="button" id="btnAdd" class="btn btn-primary" @onclick="AddModel" value="Add" />
    <input type="button" id="btnCopyCore" class="btn btn-secondary" @onclick="CopyCore" value="Clone Core as New" />
	<input type="button" id="btnAll" class="btn btn-secondary" @onclick="ShowAll" value="All" />
	<input type="button" id="btnActiveOnly" class="btn btn-secondary" @onclick="ShowActiveOnly" value="Active Only" />
}

<DataGrid Items="@modelList" TItem="Model" Context="m">
    <HeaderTemplate>
        <th>Name</th>
        <th>Start Date</th>
        <th>Start Value</th>
        <th>Latest Value</th>
        <th>Gain/Loss</th>
        <th>Actions</th>
    </HeaderTemplate>
    <RowTemplate>
        <td>@m.Name</td>
        <td>@Utils.FormatDate(m.StartDate)</td>
        <td>@Utils.FormatNumber(m.StartValue)</td>
        <td>@Utils.FormatNumber(m.LatestValue)</td>
        <td>@Utils.CalcGainLoss(m.LatestValue, m.StartValue) </td>
        <td>
            <input type="button" id="btnComposite" class="btn btn-info" @onclick="@( () => { ShowComposite(@m.Id); } )" value="View" />
            <input type="button" id="btnLineChart" class="btn btn-info" @onclick="@( () => { ShowLineChart(@m.Id); } )" value="History" />
            @if (!IsCore)
            {
                <input type="button" id="btnDetails" class="btn btn-info" @onclick="@( () => { EditModel(@m.Id); } )" value="Details" />
                <input type="button" id="btnConfigure" class="btn btn-info" @onclick="@( () => { Configure(@m.Id); } )" value="Holdings" />
            }
        </td>
    </RowTemplate>
    <FooterTemplate>
        <td colspan="3">
            Models: @m.Count
        </td>
    </FooterTemplate>
</DataGrid>

@code
{
	[Parameter] public List<Model> Models { get; set; }

	[Parameter] public bool IsCore { get; set; }

	private List<Model> modelList = new List<Model>();

	protected override void OnInitialized()
	{
		modelList = Models;
	}

	private void EditModel(Guid modelId)
	{
		SetModel(modelId);
		nav.NavigateTo($"/ModelEdit/true");
	}

	private void Configure(Guid modelId)
	{
		SetModel(modelId);
		nav.NavigateTo($"/ModelItemList/true/true");
	}

	private void ShowComposite(Guid modelId)
	{
		SetModel(modelId);
		nav.NavigateTo($"/ModelComposite/{modelId}");
	}

	private void ShowCore(Guid modelId)
	{
		SetModel(modelId);
		nav.NavigateTo($"/ModelItemList/false/false");
	}

	private void ShowLineChart(Guid modelId)
	{
		SetModel(modelId);
		nav.NavigateTo($"/ModelLineChart/{modelId}");
	}

	private void AddModel()
	{
		userState.Model = new Model();
		nav.NavigateTo($"/ModelEdit/false");
	}

	private async Task CopyCore()
	{
		Model model = appSettings.CoreModel;
		model.Name = $"Copy of {model.Name}";
		model.UserId = userState.CurrentUser.Id;
		model.StartDate = DateTime.Now;
		model.Id = Guid.Empty;
		model.IsActive = true;

		HttpResponseMessage response = await httpClient.PostAsJsonAsync("model/save", model);
		Model coreCopy = await response.Content.ReadFromJsonAsync<Model>();

		userState.Model = model;
		userState.ModelList.Add(model);
	}

	private void SetModel(Guid modelId)
	{
		userState.Model = userState.ModelList.Where(m => m.Id == modelId).FirstOrDefault();
	}

	private void ShowActiveOnly()
	{
		modelList = modelList.Where(m => m.IsActive == true).ToList();
	}

	private void ShowAll()
	{
		modelList = userState.ModelList;
	}
}
