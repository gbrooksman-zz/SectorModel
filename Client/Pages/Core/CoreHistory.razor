@page "/corehistory"
@inject AppSettings appSettings
@inject HttpClient httpClient
@using SectorModel.Client.Entities
@using SectorModel.Client.Common
@using SectorModel.Client.Pages.Components
@using SectorModel.Shared.Entities
@using SectorModel.Client.Services



<div class="container-fluid">
    <div class="row">
        <div class="col-4">
            <h3>Core Model History</h3>
        </div>
        <div class="col-8">
            <button style="padding:5px;" class="btn btn-link" @onclick="@(() => showPieChart = true)">Pie Chart</button>
            <button style="padding:5px;" class="btn btn-link" @onclick="@(() => showPieChart = false)">Data table</button>
        </div>
    </div>
    <div class="row">
     
        <div class="col-8">
            <div class="container-fluid">
                <div class="row">
                    @if (showPieChart)
                    {
                        <div class="col-6">
                            <PieChart Height="300" Width="300" PieSlices="@modelSlices" />
                        </div>
                    }                   
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    List<PieSlice> modelSlices = new List<PieSlice>();
    List<ModelItem> modelEquityList = new List<ModelItem>();
    ContentService contentService = new ContentService();
    bool showPieChart = true;

    protected async Task ShowInfo(Model model)
    {

        modelEquityList = await httpClient.GetFromJsonAsync<List<ModelItem>>($"quote/getmodelbydate?modelId={appSettings.CoreModelId}&date={model.StartDate}");

        int i = 1;
        modelSlices.Clear();
        foreach (ModelItem meq in modelEquityList)
        {
            modelSlices.Add(new PieSlice()
            {
                Name = meq.Equity.Symbol,
                Percent = meq.Percentage,
                Color = ColorPicker.Get(i)
            });
            i++;
        }

    }


    protected string FormatStopDate(DateTime stopDate, bool isActive)
    {
        string ret = stopDate == DateTime.MinValue ? "" : stopDate.ToShortDateString();
        if (string.IsNullOrEmpty(ret) && isActive)
        {
            ret = "(active)";
        }

        return ret;
    }

    protected string IsActive(bool isActive)
    {
        return isActive == true ? "(active)" : "";
    }


    protected override void OnInitialized()
    {
      
    }
}
