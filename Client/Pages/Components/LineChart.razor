@using SectorModel.Client
@using SectorModel.Shared.Entities
@using Microsoft.AspNetCore.Components
@using SectorModel.Client.Entities

@inject AppSettings appSettings
@inject HttpClient httpClient

@if(quoteList.Count == 0)
{
	<p>Loading...</p>
}
else
{

<figure>

    <svg width="@Width" height="@Height" xmlns="http://www.w3.org/2000/svg">
        <defs>
            <pattern id="grid" width="@gridWidth" height="@gridHeight" patternUnits="userSpaceOnUse">
                <rect width="@gridWidth" height="@gridHeight" fill="white" />
                <path d="M @gridWidth 0 L 0 0 0 @gridHeight" fill="none" stroke="gray" stroke-width="1" />
            </pattern>


        </defs>

        <rect width="100%" height="100%" fill="url(#grid)" stroke="gray" stroke-width="1" />

       @DrawDataElements()6

	<g class="y-axis">
		<text y="375" x="40" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">0.00020%</text>
		<text y="330" x="40" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">0.00040%</text>
		<text y="285" x="40" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">0.00060%</text>
		<text y="240" x="40" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">0.00080%</text>
		<text y="195" x="40" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">0.000100%</text>
		<text y="150" x="40" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">0.000120%</text>
		<text y="105" x="40" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">0.000140%</text>
		<text y="60" x="40" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">0.000160%</text>
  	</g>
	<g class="x-axis" transform="matrix(1, 0, 0, 1, 32, 12)">
		<text y="375" x="40" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">1960</text>
		<text y="375" x="196" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">1970</text>
		<text y="375" x="274" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">1975</text>
		<text y="375" x="352" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">1980</text>
		<text y="375" x="430" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">1985</text>
		<text y="375" x="508" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">1990</text>
		<text y="375" x="586" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">1995</text>
		<text y="375" x="664" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">2000</text>
		<text y="375" x="742" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">2005</text>
		<text y="375" x="118" style="text-anchor: middle; fill: rgb(103, 102, 102); font-size: 12px;">1965</text>
	</g>


    </svg>
</figure>

<figcaption>
    <ul>
        @RenderLegend()
    </ul>
</figcaption>

@* <span>startY: @chart.StartY  </span>
<span>varianceRatio: @varianceRatio </span>
<span>Low Variance: @lowVariance </span>
<span>High Variance: @highVariance </span> *@

}

@code
{
    [Parameter] public Model Model { get; set; }
    [Parameter] public string Width { get; set; }
    [Parameter] public string Height { get; set; }
    [Parameter] public int HorizontalGridLines { get; set; } = 10;
    [Parameter] public int VerticalGridLines { get; set; } = 10;

    private List<Quote> quoteList = new List<Quote>();
    private decimal height = 0m;
    private decimal width = 0m;
    private decimal gridWidth = 0m;
    private decimal gridHeight = 0m;
    private LineSet chart = new LineSet();
	private decimal highVariance = 0m;
	private decimal lowVariance = 0m;
	private decimal varianceRatio = 0m;

    protected override async Task OnInitializedAsync()
    {
        chart.Lines = new List<Line>();

        height = decimal.Parse(Height);
        width = decimal.Parse(Width);

        gridHeight = height / (decimal)VerticalGridLines;
        gridWidth = width / (decimal)HorizontalGridLines;

        int quoteInterval = Utils.GetInterval(Model.StartDate, DateTime.Now);

        quoteList = await httpClient.GetFromJsonAsync<List<Quote>>($"model/GetQuotesForDateRange?modelId={Model.Id}&startdate={Model.StartDate}&stopdate={DateTime.Now}&interval={quoteInterval}");

        int ci = 1;

        foreach (ModelItem mi in Model.ItemList)
        {
            List<Quote> quotes = quoteList.Where(e => e.EquityId == mi.EquityId).ToList();

            chart.Lines.Add(new Line
            {
                EquityId = mi.EquityId,
                Title = mi.Equity.SymbolName,
                ColorIndex = ci++,
                LengendPath = mi.Equity.SymbolName,
                FirstPrice = quotes.First().Price,
                HighPrice = quotes.Max(q => q.Price),
                LowPrice = quotes.Min(q => q.Price)
            });
        }

        chart.StartX = 0;
        chart.StartY = Math.Round(CalculateStartingY(),0);
    }

	private MarkupString RenderLegend()
	{
		string str = string.Empty;

 		foreach (Line line in chart.Lines)
        {
            str += $"<li style='color:{Utils.GetColor(line.ColorIndex)}'>{line.Title}</li>";
        }

		return (MarkupString) str;
	}

    private RenderFragment DrawDataElements()
    {
        RenderFragment frag = null;

        foreach (Line line in chart.Lines)
        {
            List<Quote> quotes = quoteList.Where(e => e.EquityId == line.EquityId).ToList();
            line.Path = BuildChartItemPath(quotes);
            frag += BuildLine(line);
        }

        return frag;
    }


    private decimal CalculateStartingY()
    {
        decimal startY = height /2m;

        foreach (Line line in chart.Lines)
        {
            highVariance = (line.HighPrice / line.FirstPrice);
            lowVariance =  (line.LowPrice / line.FirstPrice);
			varianceRatio = (highVariance - lowVariance);

            if (varianceRatio > 0)
            {
                startY = Math.Min(startY, (startY - highVariance) - 20m);               
            }
			else
			{
				startY = Math.Min(startY, (startY + lowVariance) + 20m); 
			}
        }

        return startY;
    }


    private string BuildChartItemPath( List<Quote> quotes)
    {

        /* 
        
            |
            |
            | 
         y  |
            |
            |
            |           
            -------------------------------
                       x
        */

        decimal firstPrice = quotes.First().Price;
        decimal lowPrice = quotes.Min(q => q.Price);
        decimal highPrice = quotes.Max(q => q.Price);

        decimal heightScaleFactor = height / ((highPrice - lowPrice) * 2m);
        decimal widthScaleFactor = 0;

        decimal highVariance = highPrice > firstPrice ? highPrice - firstPrice : 1;
        decimal lowVariance = lowPrice < firstPrice ? firstPrice - lowPrice : 1;

        decimal x = 0;

        //decimal startY = height * .7m;

        decimal startY = chart.StartY;

        string path = $"M 0 {startY} L";

        int itemCount = quotes.Count;

        foreach (var quote in quotes)
        {
            path += $" {x += widthScaleFactor} {(startY - ((firstPrice - quote.Price) * heightScaleFactor)) } ";
            if (widthScaleFactor == 0) widthScaleFactor = width / itemCount;
        }

        return path;
    }


    RenderFragment BuildLine(Line line) => builder =>
    {
        builder.OpenElement(1, "path");
			builder.AddAttribute(2, "d", line.Path);
			builder.AddAttribute(3, "fill", "none");
			builder.AddAttribute(4, "stroke", Utils.GetColor(line.ColorIndex));
			builder.AddAttribute(5, "stroke-width", 4);
			builder.OpenElement(6, "title");
			builder.AddContent(7, line.Title);
			builder.CloseElement();
        builder.CloseElement();




    };
}